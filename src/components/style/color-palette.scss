/** @format */

@use "sass:color" as color;
@use "sass:string" as string;
@use "sass:map" as map;
@use "sass:math" as math;

@import 'color-help.scss';

$hueStep: 0.64;
$hueStep2: 2.22;
$saturationStep: 15.8;
$saturationStep2: 5;
$brightnessStep1: 5;
$brightnessStep2: 15;
$lightColorCount: 5;
$darkColorCount: 4;

@function get-hue($h, $i, $isLight) {
  $hue: 0;
  @if ($h >= 60 and $h <= 240) {
    $hue: $h + $hueStep * $i;

    @if $isLight {
      $hue: $h - $hueStep * $i;
    }
  } @else {
    $hue: $h - $hueStep2 * $i;

    @if ($isLight) {
      $hue: $h + $hueStep2 * $i;
    }
  }

  @if ($hue < 0) {
    $hue: $hue + 360;
  } @else if ($hue >= 360) {
    $hue: $hue - 360;
  }

  @return $hue;
}

@function get-saturation($s, $i, $isLight) {
  $saturation: 0;
  @if ($isLight) {
    $saturation: math.round($s * 100) - $saturationStep * $i;
  } @else if ($i == $darkColorCount) {
    $saturation: math.round($s * 100) + $saturationStep2;
  } @else {
    $saturation: math.round($s * 100) + $saturationStep2 * $i;
  }
  @if ($saturation > 100) {
    $saturation: 100;
  }
  @if ($isLight and $i == $lightColorCount and $saturation > 10) {
    $saturation: 10;
  }
  @if ($saturation < 6) {
    $saturation: 6;
  }
  @return math.round($saturation);
}

@function get-value($v, $i, $isLight) {
  @if ($isLight) {
    @return math.round($v * 100) + $brightnessStep1 * $i;
  }
  @return math.round($v * 100) - $brightnessStep2 * $i;
}

@function color-palette($color, $index) {
  $isLight: $index <= 6;
  $i: $index - $lightColorCount - 1;

  @if ($isLight) {
    $i: $lightColorCount + 1 - $index;
  }

  $hsv: to-hsv(hex-to-rgb($color));

  $h: get-hue(map.get($hsv, 'h'), $i, $isLight);
  $s: get-saturation(map.get($hsv, 's'), $i, $isLight);
  $v: get-value(map.get($hsv, 'v'), $i, $isLight);

  $rgb: hsv-to-rgb($h, $s, $v);

  $hex: to-hex($rgb);

  @return $hex;
}
