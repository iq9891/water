/** @format */

@use "sass:map" as map;
@use "sass:color" as color;
@use "sass:meta" as meta;
@use "sass:string" as string;
@use "sass:math" as math;
@use "sass:list" as list;

@function is-one-point-zero($n) {
  @return meta.type-of($n) == 'string' and string.index($n, '.') != -1;
}

@function is-percentage($n) {
  @return meta.type-of($n) == 'string' and string.index($n, '%') != -1;
}

@function get-number-from-percentage($n) {
  @return string.slice($n, 1, -2);
}

@function convert-to-percentage($n) {
  @if ($n <= 1) {
    $n: ($n * 100) + '%';
  }

  @return $n;
}

@function bound01($n, $max) {
  @if (is-one-point-zero($n)) {
    $n: 100;
  }

  $processPercent: is-percentage($n);
  $oneMax: $n;

  @if ($processPercent) {
    $oneMax: get-number-from-percentage($n);
  }
  $n: math.min($max, math.max(0, $oneMax));

  // Automatically convert percentage into number
  @if ($processPercent) {
    $n: $n * $max / 100;
  }
  // Handle floating point rounding errors
  @if (math.abs($n - $max) < 0.000001) {
    $n: 1;
    @return $n;
  }
  // Convert into [0, 1] range if it isn't already
  @return ($n % $max) / $max;
}

@function hex-to-rgb($color) {
  @return (r: color.red($color), g: color.green($color), b: color.blue($color));
}

@function hsv-to-rgb($h, $s, $v) {
  $h: bound01(convert-to-percentage($h), 360) * 6;
  $s: bound01(convert-to-percentage($s), 100);
  $v: bound01($v, 100);

  $i: math.floor($h);
  $f: $h - $i;
  $p: $v * (1 - $s);
  $q: $v * (1 - $f * $s);
  $t: $v * (1 - (1 - $f) * $s);
  $mod: $i % 6;

  $r: 0;
  $g: 0;
  $b: 0;

  @if ($mod == 0) {
    $r: $v;
    $g: $t;
    $b: $p;
  }

  @if ($mod == 1) {
    $r: $q;
    $g: $v;
    $b: $p;
  }

  @if ($mod == 2) {
    $r: $p;
    $g: $v;
    $b: $t;
  }

  @if ($mod == 3) {
    $r: $p;
    $g: $q;
    $b: $v;
  }

  @if ($mod == 4) {
    $r: $t;
    $g: $p;
    $b: $v;
  }

  @if ($mod == 5) {
    $r: $v;
    $g: $p;
    $b: $q;
  }

  @return (
    r: math.round($r * 255),
    'g': math.round($g * 255),
    'b': math.round($b * 255)
  );
}

@function rgb-to-hsv($r, $g, $b) {
  $r: bound01($r, 255);
  $g: bound01($g, 255);
  $b: bound01($b, 255);

  $max: math.max($r, $g, $b);
  $min: math.min($r, $g, $b);
  $h: 0;
  $s: 0;
  $v: $max;

  $d: $max - $min;
  $s: $d / $max;

  @if ($max == 0) {
    $s: 0;
  }

  @if ($max == $min) {
    $h: 0; // achromatic
  } @else {
    @if ($max == $r) {
      $step: 0;

      @if ($g < $b) {
        $step: 6;
      }
      $h: ($g - $b) / $d + $step;
    }

    @if ($max == $g) {
      $h: ($b - $r) / $d + 2;
    }

    @if ($max == $b) {
      $h: ($r - $g) / $d + 4;
    }

    $h: $h / 6;
  }
  @return (h: $h, s: $s, v: $v);
}

@function rgb-to-hex($rgb) {
  @return rgb(map.get($rgb, 'r'), map.get($rgb, 'g'), map.get($rgb, 'b'));
}

@function to-hsv($rgb) {
  $hsv: rgb-to-hsv(map.get($rgb, 'r'), map.get($rgb, 'g'), map.get($rgb, 'b'));
  @return (
    h: map.get($hsv, 'h') * 360,
    s: map.get($hsv, 's'),
    v: map.get($hsv, 'v')
  );
}

@function to-hex($rgb) {
  @return rgb-to-hex($rgb);
}
